//
// Generated file, do not edit! Created by opp_msgtool 6.0 from SubsystemMessage.msg.
//

#ifndef __AFDX_SUBSYSTEMMESSAGE_M_H
#define __AFDX_SUBSYSTEMMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace afdx {

class SubsystemMessage;

}  // namespace afdx

// cplusplus {{
#include "Job.h"
// }}

#include "Job_m.h" // import Job


namespace afdx {

/**
 * Class generated from <tt>SubsystemMessage.msg:25</tt> by opp_msgtool.
 * <pre>
 * message SubsystemMessage extends queueing::Job
 * {
 *     int partitionId;     // (5bit) used as [p] 
 *     int packetLength;
 * }
 * </pre>
 */
class SubsystemMessage : public ::queueing::Job
{
  protected:
    int partitionId = 0;
    int packetLength = 0;

  private:
    void copy(const SubsystemMessage& other);

  protected:
    bool operator==(const SubsystemMessage&) = delete;

  public:
    SubsystemMessage(const char *name=nullptr, short kind=0);
    SubsystemMessage(const SubsystemMessage& other);
    virtual ~SubsystemMessage();
    SubsystemMessage& operator=(const SubsystemMessage& other);
    virtual SubsystemMessage *dup() const override {return new SubsystemMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getPartitionId() const;
    virtual void setPartitionId(int partitionId);

    virtual int getPacketLength() const;
    virtual void setPacketLength(int packetLength);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SubsystemMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SubsystemMessage& obj) {obj.parsimUnpack(b);}


}  // namespace afdx


namespace omnetpp {

template<> inline afdx::SubsystemMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<afdx::SubsystemMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __AFDX_SUBSYSTEMMESSAGE_M_H

