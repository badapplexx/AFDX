//
// Generated file, do not edit! Created by opp_msgtool 6.0 from AFDXMessage.msg.
//

#ifndef __AFDX_AFDXMESSAGE_M_H
#define __AFDX_AFDXMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

namespace afdx {

class AFDXMessage;

}  // namespace afdx

// cplusplus {{
#include "Job.h"
// }}

#include "Job_m.h" // import Job

namespace afdx {

/**
 * Class generated from <tt>AFDXMessage.msg:22</tt> by opp_msgtool.
 * <pre>
 * //
 * // A Message describing an AFDX msg. (length)  
 * //
 * message AFDXMessage extends queueing::Job
 * {
 *     int networkId;       // (1) used as [n]
 *     int equipmentId;     // (1) used as [e]
 *     int interfaceId;     // (3bit) used as [i] 
 *     int virtualLinkId;   // (2) used as [v]
 *     int seqNum;          // (1) used as [s]
 *     int partitionId;     // (5bit) used as [p] 
 *     double bagValue;
 *     double rho;			//used in token bucket algorithm
 *     double sigma;			//used in token bucket algorithm
 * 
 *     simtime_t AFDXMarshallingTime;
 *     simtime_t regLogExitTime;
 *     simtime_t regLogEntryTime;
 * 
 *     // preamble (7)
 *     // SFD (1)
 *     // *** start ethernet frame ***
 *     // abstract string ethDestAddr; // (6) derived as: 00000011 00000000 00000000 00000000 vvvvvvvv vvvvvvvv     
 *     // abstract string ethSrcAddr; // (6) derived as: 00000010 00000000 00000000 nnnnnnnn eeeeeeee iii00000
 *     // type (2) - always IPv4
 *     // payload (46-1500)
 *     // FCS (4)
 *     // *** end ethernet frame ***
 *     // IFG (12)
 * 
 *     // *** start ip layer ***  
 *     // length, frag control, checksum not modeled - (12)
 *     // abstract string ipSrcAddress; // (4) derived as : 00001010 nnnnnnnn eeeeeeee xxxppppp
 *     // abstract string ipDestAddress; // (4) derived as: 11100000 11100000 vvvvvvvv vvvvvvvv 
 *     // *** end ip layer ***
 * 
 *     // *** start udp header ***
 *     int udpSrcPort;    // (2)
 *     int udpDestPort;   // (2)
 *     // payload length - not modeled (2)
 *     // CRC - not modeled (2)
 *     // *** end udp header ***
 * 
 * }
 * </pre>
 */
class AFDXMessage: public ::queueing::Job {
protected:
    int networkId = 0;
    int equipmentId = 0;
    int interfaceId = 0;
    int virtualLinkId = 0;
    int seqNum = 0;
    int partitionId = 0;
    double bagValue = 0;
    double rho = 0;
    double sigma = 0;
    ::omnetpp::simtime_t AFDXMarshallingTime = SIMTIME_ZERO;
    ::omnetpp::simtime_t regLogExitTime = SIMTIME_ZERO;
    ::omnetpp::simtime_t regLogEntryTime = SIMTIME_ZERO;
    int udpSrcPort = 0;
    int udpDestPort = 0;

private:
    void copy(const AFDXMessage &other);

protected:
    bool operator==(const AFDXMessage&) = delete;

public:
    AFDXMessage(const char *name = nullptr, short kind = 0);
    AFDXMessage(const AFDXMessage &other);
    virtual ~AFDXMessage();
    AFDXMessage& operator=(const AFDXMessage &other);
    virtual AFDXMessage* dup() const override {
        return new AFDXMessage(*this);
    }
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getNetworkId() const;
    virtual void setNetworkId(int networkId);

    virtual int getEquipmentId() const;
    virtual void setEquipmentId(int equipmentId);

    virtual int getInterfaceId() const;
    virtual void setInterfaceId(int interfaceId);

    virtual int getVirtualLinkId() const;
    virtual void setVirtualLinkId(int virtualLinkId);

    virtual int getSeqNum() const;
    virtual void setSeqNum(int seqNum);

    virtual int getPartitionId() const;
    virtual void setPartitionId(int partitionId);

    virtual double getBagValue() const;
    virtual void setBagValue(double bagValue);

    virtual double getRho() const;
    virtual void setRho(double rho);

    virtual double getSigma() const;
    virtual void setSigma(double sigma);

    virtual ::omnetpp::simtime_t getAFDXMarshallingTime() const;
    virtual void setAFDXMarshallingTime(
            ::omnetpp::simtime_t AFDXMarshallingTime);

    virtual ::omnetpp::simtime_t getRegLogExitTime() const;
    virtual void setRegLogExitTime(::omnetpp::simtime_t regLogExitTime);

    virtual ::omnetpp::simtime_t getRegLogEntryTime() const;
    virtual void setRegLogEntryTime(::omnetpp::simtime_t regLogEntryTime);

    virtual int getUdpSrcPort() const;
    virtual void setUdpSrcPort(int udpSrcPort);

    virtual int getUdpDestPort() const;
    virtual void setUdpDestPort(int udpDestPort);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AFDXMessage &obj) {
    obj.parsimPack(b);
}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AFDXMessage &obj) {
    obj.parsimUnpack(b);
}

}  // namespace afdx

namespace omnetpp {

template<> inline afdx::AFDXMessage* fromAnyPtr(any_ptr ptr) {
    return check_and_cast<afdx::AFDXMessage*>(ptr.get<cObject>());
}

}  // namespace omnetpp

#endif // ifndef __AFDX_AFDXMESSAGE_M_H

